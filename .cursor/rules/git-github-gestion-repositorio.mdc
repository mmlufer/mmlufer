---
description: Gestión del Repositorios con Git y GitHub CLI
globs: 
alwaysApply: false
---
# Reglas para Gestión del Repositorio con GitHub CLI

## Configuración Inicial

1. **Configuración de Git**
   ```bash
   # Configurar nombre y correo
   git config --global user.name "tu_nombre"
   git config --global user.email "tu_email@ejemplo.com"

   # Configurar editor (opcional)
   git config --global core.editor "code --wait"

   # Configurar fin de línea (recomendado en Windows)
   git config --global core.autocrlf true
   ```

2. **Configuración de Autenticación**
   ```bash
   # Usar GitHub CLI (recomendado)
   gh auth login

   # Alternativa: Configurar token (HTTPS)
   git config --global credential.helper store
   # Luego al hacer push por primera vez introducir token
   ```

## Operaciones Básicas de Git

1. **Inicializar y Conectar Repositorio**
   ```bash
   # Inicializar nuevo repositorio
   git init

   # Conectar con repositorio remoto
   git remote add origin https://github.com/usuario/repositorio.git

   # Verificar conexión remota
   git remote -v
   ```

2. **Clonar Repositorio Existente**
   ```bash
   # Clonar repositorio
   git clone https://github.com/usuario/repositorio.git

   # Clonar rama específica
   git clone -b nombre-rama https://github.com/usuario/repositorio.git
   ```

3. **Gestión de Cambios**
   ```bash
   # Ver estado del repositorio
   git status

   # Añadir archivos al staging
   git add archivo.ext         # Archivo específico
   git add .                   # Todos los archivos
   git add directorio/         # Todo un directorio

   # Hacer commit
   git commit -m "Mensaje descriptivo del cambio"

   # Combinar add y commit para archivos modificados (no nuevos)
   git commit -am "Mensaje descriptivo"
   ```

4. **Sincronización con Remoto**
   ```bash
   # Enviar cambios al remoto
   git push -u origin rama    # Primera vez (establece upstream)
   git push                   # Posteriores veces

   # Obtener cambios del remoto
   git fetch                  # Descarga sin integrar
   git pull                   # Descarga e integra cambios
   git pull --rebase          # Descarga y aplica cambios locales encima
   ```

## Gestión de Ramas

1. **Operaciones con Ramas**
   ```bash
   # Listar ramas
   git branch                 # Locales
   git branch -r              # Remotas
   git branch -a              # Todas

   # Crear rama
   git branch nombre-rama

   # Cambiar a una rama
   git checkout nombre-rama

   # Crear y cambiar en un paso
   git checkout -b nombre-rama

   # Eliminar rama
   git branch -d nombre-rama  # Local (seguro)
   git branch -D nombre-rama  # Local (forzado)
   git push origin --delete nombre-rama  # Remota
   ```

2. **Flujo de Trabajo con Ramas**
   ```bash
   # Crear rama para nueva característica
   git checkout -b feature/nombre-caracteristica

   # Trabajar y hacer commits...

   # Actualizar con cambios de master/main
   git checkout main
   git pull
   git checkout feature/nombre-caracteristica
   git rebase main

   # Resolver conflictos si es necesario

   # Enviar cambios
   git push -u origin feature/nombre-caracteristica
   ```

## Integración de Cambios

1. **Merge (Fusión)**
   ```bash
   # Fusionar rama en la actual
   git checkout rama-destino
   git merge rama-origen

   # Merge sin fast-forward (preserva historial)
   git merge --no-ff rama-origen
   ```

2. **Rebase (Reorganización)**
   ```bash
   # Reorganizar commits sobre otra base
   git checkout rama-caracteristica
   git rebase main

   # Rebase interactivo (para limpiar commits)
   git rebase -i HEAD~5  # Para los últimos 5 commits
   ```

3. **Cherry-pick (Selección)**
   ```bash
   # Aplicar un commit específico
   git cherry-pick hash-commit

   # Aplicar varios commits
   git cherry-pick hash1 hash2 hash3
   ```

## Revisión de Historia

1. **Explorar Historial**
   ```bash
   # Ver historial
   git log
   git log --oneline        # Formato compacto
   git log --graph --oneline  # Visual con ramas

   # Historial de un archivo
   git log -- archivo.ext

   # Cambios en un commit
   git show hash-commit
   ```

2. **Examinar Cambios**
   ```bash
   # Cambios sin añadir al staging
   git diff

   # Cambios en staging
   git diff --staged

   # Cambios entre commits
   git diff hash1 hash2

   # Cambios en un archivo
   git diff -- archivo.ext
   ```

## Gestión de Tags (Versiones)

1. **Trabajar con Etiquetas**
   ```bash
   # Listar tags
   git tag

   # Crear tag ligero
   git tag v1.0.0

   # Crear tag anotado (recomendado)
   git tag -a v1.0.0 -m "Versión 1.0.0"

   # Enviar tags al remoto
   git push origin v1.0.0    # Tag específico
   git push origin --tags    # Todos los tags
   ```

## Solución de Problemas

1. **Deshacer Cambios**
   ```bash
   # Descartar cambios en archivos
   git restore archivo.ext  # Git moderno
   git checkout -- archivo.ext  # Git tradicional

   # Deshacer un commit (crea nuevo commit que revierte)
   git revert hash-commit

   # Eliminar último commit manteniendo cambios
   git reset --soft HEAD~1

   # Eliminar último commit y descartar cambios
   git reset --hard HEAD~1

   # Limpiar archivos no rastreados
   git clean -fd  # -f archivos, -d directorios
   ```

2. **Recuperar Trabajo**
   ```bash
   # Guardar trabajo temporal
   git stash

   # Listar stashes
   git stash list

   # Recuperar último stash
   git stash pop

   # Recuperar stash específico
   git stash apply stash@{1}
   ```

## Flujos de Trabajo con GitHub

1. **Ciclo Común de Desarrollo**
   ```bash
   # Clonar repositorio
   git clone https://github.com/usuario/repo.git
   cd repo

   # Crear rama para cambio
   git checkout -b feature/nueva-caracteristica

   # Hacer cambios y commits
   git add .
   git commit -m "Añadir nueva característica"

   # Enviar cambios
   git push -u origin feature/nueva-caracteristica

   # Crear PR usando GitHub CLI
   gh pr create --title "Nueva característica" --body "Descripción de la característica"
   ```

2. **Colaboración en Proyectos**
   ```bash
   # Crear fork (desde web de GitHub)

   # Clonar fork
   git clone https://github.com/tu-usuario/proyecto-fork.git
   cd proyecto-fork

   # Añadir repositorio original como 'upstream'
   git remote add upstream https://github.com/proyecto-original/proyecto.git

   # Mantener fork actualizado
   git fetch upstream
   git checkout main
   git merge upstream/main
   git push origin main
   ```

3. **Revisión de Pull Requests**
   ```bash
   # Revisar PR localmente
   gh pr checkout número-pr

   # Probar cambios...

   # Aprobar PR
   gh pr review número-pr --approve

   # Solicitar cambios
   gh pr review número-pr --request-changes -b "Necesita estos cambios..."
   ```

## Checklist de Mejores Prácticas

- [ ] Configuración de Git completa (nombre, email)
- [ ] Autenticación segura configurada (SSH o token)
- [ ] Nombrado consistente de ramas (feature/, bugfix/, etc.)
- [ ] Commits atómicos con mensajes descriptivos
- [ ] Sincronización regular con repositorio remoto
- [ ] Pull requests con descripciones claras
- [ ] Gestión adecuada de tags para versiones
- [ ] Revisión de código antes de merge

## Referencias Rápidas

1. **Comandos Git Comunes**
   | Operación | Comando |
   | --------- | ------- |
   | Estado | `git status` |
   | Añadir | `git add .` |
   | Commit | `git commit -m "mensaje"` |
   | Push | `git push` |
   | Pull | `git pull` |
   | Cambiar rama | `git checkout rama` |
   | Nueva rama | `git checkout -b rama` |
   | Historial | `git log --oneline` |
   | Ver cambios | `git diff` |
   | Deshacer cambios | `git restore archivo` |

2. **Comandos GitHub CLI**
   | Operación | Comando |
   | --------- | ------- |
   | Autenticación | `gh auth login` |
   | Crear repositorio | `gh repo create` |
   | Ver repositorio | `gh repo view` |
   | Crear PR | `gh pr create` |
   | Listar PRs | `gh pr list` |
   | Revisar PR | `gh pr review` |
   | Crear issue | `gh issue create` |
   | Listar issues | `gh issue list` |
